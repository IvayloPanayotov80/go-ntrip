package testdata

import (
	"time"

	"github.com/goblimey/go-ntrip/rtcm/utils"
)

// Empty frame.
var EmptyFrame []byte

// Incomplete message - looks like a real message with a length of 0xaa
// but we hit EOF while reading it.  Should be returned as a non-RTCM message.
var IncompleteMessage = []byte{0xd3, 0x00, 0xaa, 0x46, 0x70, 0x00}

// MessageFrameWithIncorrectStart is a frame that does not start with 0xd3.
var MessageFrameWithIncorrectStart = []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff}

// MessageFrameWithLengthTooBig has a second byte that's two big.  The sixteen
// bit value in the second and third byte should less than 4095 (1111 1111 1111).
var MessageFrameWithLengthTooBig = []byte{
	0xd3, 0xff, 0xff,
	0xff, 0xff, 0xff,
	0xc7, 0x9d, 0x2f,
}

// MessageFrameWithLengthZero has zero in the second and third byte - should
// be 1-4095.
var MessageFrameWithLengthZero = []byte{
	0xd3, 0x00, 0x00,
	0x44, 0x90, 0x00,
	0x91, 0x08, 0x46,
}

// Four bytes of junk which should be returned as a non-RTCM message,
// followed by the start of message byte.
var JunkAtStart = []byte{'j', 'u', 'n', 'k', ' ', 'j', 'u', 'n', 'k', 0xd3}

// Four bytes of junk which should be returned as a non-RTCM message,
var AllJunk = []byte{'j', 'u', 'n', 'k'}

// We should get this result when we read the junkAtStartReader or the junkReader.
const WantJunk = "junk"

// This is a dummy message of type 1024 (0x400), which is not is not
// handled.  Attempting to display it should produce a warning to
// that effect.  The leader contains the type and the CRC is correct,
// which is all we need for our testing.  The embedded message is NOT
// a correctly formatted type 1024 message.
var UnhandledMessageType1024 = []byte{
	0xd3, 0, 0x08,
	0x40, 0, 0, 0x8a, 0, 0, 0, 0,
	0x4f, 0x5e, 0xe7,
}

// Fake1230 is a fake message with type 1230 (Glonass code/phase bias).
// The contents is junk - it does not match the 1230 structure.
// 1230 is 0x4ce.
var Fake1230 = []byte{0xd3, 0x00, 0x08,
	0x4c, 0xe0, 00, 0x8a, 0, 0, 0, 0,
	0xa8, 0xf7, 0x2a,
}

var MessageFrameWithCRCFailure = []byte{0xd3, 0, 0x08,
	0x4c, 0xe0, 0x00,
	0x8a, 0, 0, 0, 0,
	// For a legal CRC the next line would be 0xa8, 0xf7, 0x2a,
	0xa8, 0xf7, 0x2b,
}

// MessageFrameType1005 contains a message of type 1005 - Stationary RTK Reference Station
// ARP (base position).
var MessageFrameType1005 = []byte{
	// leader:
	0xd3, 0, 19,
	// messageType1005 contains a message type 1005.
	// message type:    Station ID:        ITRF year
	//                                             ign:   x:
	// 0011 1110   1101|0000   0000 0010|  0000 11|11  11|00 0000
	//                                                 ig y:
	// 0000 0000   0000 0001   1110 0010   0100 0000|  01|00 0000
	//                                                    z:
	// 0000 0000   0000 0011   1001 0100   0100 0111|  10|00 0000
	// 0000 0000   0000 0101   0100 0110   0100 1110
	0x3e, 0xd0, 0x02, 0x0f, 0xc0,
	0x00, 0x01, 0xe2, 0x40, 0x40,
	0x00, 0x03, 0x94, 0x47, 0x80,
	0x00, 0x05, 0x46, 0x4e,
	// CRC
	0x5b, 0x90, 0x5f,
}

const MessageFrameType1005Display = `Message type 1005, Stationary RTK Reference Station Antenna Reference Point (ARP)
Commonly called the Station Description this message includes the ECEF location of the ARP of the antenna (not the phase center) and also the quarter phase alignment details.  The datum field is not used/defined, which often leads to confusion if a local datum is used. See message types 1006 and 1032. The 1006 message also adds a height about the ARP value.
Frame length 25 bytes:
00000000  d3 00 13 3e d0 02 0f c0  00 01 e2 40 40 00 03 94  |...>.......@@...|
00000010  47 80 00 05 46 4e 5b 90  5f                       |G...FN[._|

stationID 2, ITRF realisation year 3, unknown bits 1111,
x 123456, unknown bits 01, y 234567, unknown bits 10, z 345678,
ECEF coords in metres (12.3456, 23.4567, 34.5678)
`

// MessageFrameType1006 contains a message of type 1006 - Stationary RTK Reference Station
// ARP with Antenna Height (base position and height).
var MessageFrameType1006 = []byte{
	// leader:
	0xd3, 0, 21,
	// messageType1006 contains a message type 1006.
	// message type:    Station ID:        ITRF year
	//                                             ign:   x:
	// 0011 1110   1110|0000   0000 0010|  0000 11|11  11|00 0000
	//                                                 ig y:
	// 0000 0000   0000 0001   1110 0010   0100 0000|  01|00 0000
	//                                                    z:
	// 0000 0000   0000 0011   1001 0100   0100 0111|  10|00 0000
	//                                                 height
	// 0000 0000   0000 0101   0100 0110   0100 1110|  0000 0010
	// 0000 0001 (height 513 - 0.0513)
	0x3e, 0xe0, 0x02, 0x0f, 0xc0,
	0x00, 0x01, 0xe2, 0x40, 0x40,
	0x00, 0x03, 0x94, 0x47, 0x80,
	0x00, 0x05, 0x46, 0x4e, 0x02,
	0x01,
	// CRC
	0x9f, 0x72, 0xf4,
}

const MessageFrameType1006Display = `Message type 1006, Stationary RTK Reference Station ARP with Antenna Height
Commonly called the Station Description this message includes the ECEF location of the antenna (the antenna reference point (ARP) not the phase center) and also the quarter phase alignment details.  The height about the ARP value is also provided. The datum field is not used/defined, which often leads to confusion if a local datum is used. See message types 1005 and 1032. The 1005 message does not convey the height about the ARP value.
Frame length 27 bytes:
00000000  d3 00 15 3e e0 02 0f c0  00 01 e2 40 40 00 03 94  |...>.......@@...|
00000010  47 80 00 05 46 4e 02 01  9f 72 f4                 |G...FN...r.|

stationID 2, ITRF realisation year 3, unknown bits 1111,
x 123456, unknown bits 01, y 234567, unknown bits 10, z 345678,
ECEF coords in meters (12.3456, 23.4567, 34.5678)
Antenna height 0.0513 meters
`

var MessageFrameType1077 = []byte{

	// A real RTCM message frame captured from a UBlox GPS device.  This contains a message
	// type 1077 (a GPS MSM7), padded with null bytes at the end. Bytes 6 and 7 (0x62, 0x00)
	// of the embedded message contain the multiple message flag (true), and the sequence
	// number (zero), so this is the first of a sequence of messages covering the same scan
	// and it only contains some of the signal cells.  The timestamp is 432023000
	// (5 days 0 hours 0 minutes 23 seconds 0 milliseconds).  In 2023 the GPS week starts at
	// 23:59:42 on Saturday so the resulting time is 00:00:05 on Friday.  If the start of
	// week value is set to 2023-05-13 23:59:42 UTC then the time of this message should be
	// displayed as 2023-05-18 00:00:05.
	//
	// This is the first message of MesageBatchWith1077 below,
	//
	// Leader:
	0xd3, 0, 219, // 0-2 of message frame
	//
	// RTCM message type 1077 - signals from GPS satellites:
	//         |-- multiple message flag
	//         | |-- issue of data station
	//         v v
	// 0110 00|1|0 00|00 0000
	//
	// The header is 185 bits long with 16 cell mask bits.
	//               | 30-bit timestamp 0x6700976 - 432023000 -
	0x43, 0x50, 0x00, 0x67, 0x00, 0x97, 0x62, 0x00, // 0-7 of embedded message
	//                   64 bit satellite mask
	// 0|00|0 0|0|00   0|000 1000   0100 0000   1010 0000
	0x00, 0x08, 0x40, 0xa0, // 8-11
	// 0110 0101   0000 0000   0000 0000   0000 0000
	0x65, 0x00, 0x00, 0x00, // 12-15
	//               32 bit signal mask
	// 0000 0000   0|010 0000   0000 0000    1000 0000
	0x00, 0x20, 0x00, 0x80, // 16-19
	//
	//               64 bit cell mask                 Satellite cells
	// 0000 0000   0|11|0 1|10|1   1|11|1  1|11|1   1|010   1000
	0x00, 0x6d, 0xff, 0xa8, // 20-23
	// 1|010 1010   0|010 0110   0|010 0011   1|010 0110
	/* 24 */ 0xaa, 0x26, 0x23, 0xa6, // 24-27
	// 1|010 0010   0|010 0011   0|010 0100   0|000 0|000
	0xa2, 0x23, 0x24, 0x00, // 28-31
	// 0|000 0|000   0|000 0|000   0|000 0|000   0|011 0110
	0x00, 0x00, 0x00, 0x36, // 32-35
	// 011|0 1000
	0x68, 0xcb, 0x83, 0x7a, // 36-39
	0x6f, 0x9d, 0x7c, 0x04, 0x92, 0xfe, 0xf2, 0x05, // 40-47
	0xb0, 0x4a, 0xa0, 0xec, 0x7b, 0x0e, 0x09, 0x27, // 48-55
	//          Signal cells
	0xd0, 0x3f, 0x23, 0x7c, 0xb9, 0x6f, 0xbd, 0x73, // 56-63
	0xee, 0x1f, 0x01, 0x64, 0x96, 0xf5, 0x7b, 0x27, // 64-71
	0x46, 0xf1, 0xf2, 0x1a, 0xbf, 0x19, 0xfa, 0x08, // 72-79
	0x41, 0x08, 0x7b, 0xb1, 0x1b, 0x67, 0xe1, 0xa6, // 80-87
	0x70, 0x71, 0xd9, 0xdf, 0x0c, 0x61, 0x7f, 0x19, // 88
	0x9c, 0x7e, 0x66, 0x66, 0xfb, 0x86, 0xc0, 0x04, // 96
	0xe9, 0xc7, 0x7d, 0x85, 0x83, 0x7d, 0xac, 0xad, // 104
	0xfc, 0xbe, 0x2b, 0xfc, 0x3c, 0x84, 0x02, 0x1d, // 112
	0xeb, 0x81, 0xa6, 0x9c, 0x87, 0x17, 0x5d, 0x86, // 120
	0xf5, 0x60, 0xfb, 0x66, 0x72, 0x7b, 0xfa, 0x2f, // 128
	0x48, 0xd2, 0x29, 0x67, 0x08, 0xc8, 0x72, 0x15, // 136
	0x0d, 0x37, 0xca, 0x92, 0xa4, 0xe9, 0x3a, 0x4e, // 144
	0x13, 0x80, 0x00, 0x14, 0x04, 0xc0, 0xe8, 0x50, // 152
	0x16, 0x04, 0xc1, 0x40, 0x46, 0x17, 0x05, 0x41, // 160
	0x70, 0x52, 0x17, 0x05, 0x01, 0xef, 0x4b, 0xde, // 168
	0x70, 0x4c, 0xb1, 0xaf, 0x84, 0x37, 0x08, 0x2a, // 176
	0x77, 0x95, 0xf1, 0x6e, 0x75, 0xe8, 0xea, 0x36, // 184
	0x1b, 0xdc, 0x3d, 0x7a, 0xbc, 0x75, 0x42, 0x80, // 192-199
	// Padding bytes.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 200-207
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 208-215
	0x00, 0x00, 0x00, // 216-218 of embedded message
	// CRC
	0x0c, 0x2d, 0xf3, // 222-224 of message frame.
}

// The time of the message depends on the timestamp and the current GNSS week of the constellation.
// The latter changes over time and only the handler can keep track of it, so for many packages
// these values have to be set manually by the test.  These are the expected times in
// the display of the message when StartOfWeek is set to 2023-05-13 23:59:42 +0000 UTC
// (18 seconds before midnight at the end of Saturday, the start of the GPS week).
var StartTimeOfMessageFrameType1077 = time.Date(2023, time.May, 13, 23, 59, 42, 0, utils.LocationUTC)
var UTCTimeOfMessageFrameType1077 = time.Date(2023, time.May, 18, 0, 0, 5, 0, utils.LocationUTC)

const MessageFrameType1077Heading = `Message type 1077, GPS Full Pseudoranges and PhaseRanges plus Carrier to Noise Ratio (high resolution)
The type 7 Multiple Signal Message format for the USA’s GPS system.
`

const MessageFrameType1077SentAt = "Time: 2023-05-13 23:59:42.002 +0000 UTC\n"

const MessageFrameType1077StartOfWeek = "Start of GPS week 2023-05-13 23:59:42.000 UTC plus timestamp 2 (0d 0h 0m 0s 2ms)\n"

const MessageFrameType1077HexDump = `Frame length 225 bytes:
00000000  d3 00 db 43 50 00 67 00  97 62 00 00 08 40 a0 65  |...CP.g..b...@.e|
00000010  00 00 00 00 20 00 80 00  6d ff a8 aa 26 23 a6 a2  |.... ...m...&#..|
00000020  23 24 00 00 00 00 36 68  cb 83 7a 6f 9d 7c 04 92  |#$....6h..zo.|..|
00000030  fe f2 05 b0 4a a0 ec 7b  0e 09 27 d0 3f 23 7c b9  |....J..{..'.?#|.|
00000040  6f bd 73 ee 1f 01 64 96  f5 7b 27 46 f1 f2 1a bf  |o.s...d..{'F....|
00000050  19 fa 08 41 08 7b b1 1b  67 e1 a6 70 71 d9 df 0c  |...A.{..g..pq...|
00000060  61 7f 19 9c 7e 66 66 fb  86 c0 04 e9 c7 7d 85 83  |a...~ff......}..|
00000070  7d ac ad fc be 2b fc 3c  84 02 1d eb 81 a6 9c 87  |}....+.<........|
00000080  17 5d 86 f5 60 fb 66 72  7b fa 2f 48 d2 29 67 08  |.]..` + "`" + `.fr{./H.)g.|
00000090  c8 72 15 0d 37 ca 92 a4  e9 3a 4e 13 80 00 14 04  |.r..7....:N.....|
000000a0  c0 e8 50 16 04 c1 40 46  17 05 41 70 52 17 05 01  |..P...@F..ApR...|
000000b0  ef 4b de 70 4c b1 af 84  37 08 2a 77 95 f1 6e 75  |.K.pL...7.*w..nu|
000000c0  e8 ea 36 1b dc 3d 7a bc  75 42 80 00 00 00 00 00  |..6..=z.uB......|
000000d0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 0c 2d  |...............-|
000000e0  f3                                                |.|

`

// The expected display of the header of the message in MessageFrameType1077 when the
// StartOfWeek is set to 2023-05-13 23:59:42 +0000 UTC.
const WantHeaderFromMessageFrameType1077 = `stationID 0, multiple message, issue of data station 0
session transmit time 0, clock steering 0, external clock 0
divergence free smoothing false, smoothing interval 0
Satellite mask:
0001 0000 1000 0001  0100 0000 1100 1010  0000 0000 0000 0000  0000 0000 0000 0000
Signal mask: 0100 0000 0000 0001  0000 0000 0000 0000
cell mask: tt ft tf tt tt tt tt tt
8 satellites, 2 signal types, 14 signals`

// The expected display of the satellite list of the message in MessageFrameType1077.
const WantSatelliteListFromMessageFrameType1077 = `Satellite ID {approx range - whole, frac, millis, metres, extended info, phase range rate}:
 4 {81, 435, 81.425, 24410542.339, 0, -135}
 9 {84, 281, 84.274, 25264833.738, 0, 182}
16 {76, 449, 76.438, 22915678.774, 0, 597}
18 {71, 756, 71.738, 21506595.669, 0, 472}
25 {77, 892, 77.871, 23345166.602, 0, -633}
26 {68, 943, 68.921, 20661965.550, 0, 292}
29 {70, 514, 70.502, 21135953.821, 0, -383}
31 {72, 293, 72.286, 21670837.435, 0, -442}`

// The expected display of the signal list of the message in MessageFrameType1077
const WantSignalListFromMessageFrameType1077 = `Signals: sat ID sig ID {range m, phase range, phase range rate doppler Hz, phase range rate m/s, lock time ind, half cycle ambiguity, Carrier Noise Ratio, wavelength}:
 4  2 {(-26835, -14.985, 24410527.355), (-117960, 128278179.264), 709.992, (-1070, -0.107, -135.107), 582, false, 640, 0.190}
 4 16 {(-34073, -19.027, 24410523.313), (-209715, 99956970.352), 553.242, (-1074, -0.107, -135.107), 581, false, 608, 0.244}
 9 16 {(-146464, -81.787, 25264751.952), (-586368, 103454935.508), -745.762, (1227, 0.123, 182.123), 179, false, 464, 0.244}
16  2 {(182573, 101.950, 22915780.724), (643982, 120423177.179), -3139.070, (3452, 0.345, 597.345), 529, false, 640, 0.190}
18  2 {(-86172, -48.119, 21506547.550), (-324858, 113017684.727), -2482.645, (4316, 0.432, 472.432), 579, false, 704, 0.190}
18 16 {(-94749, -52.909, 21506542.760), (-304805, 88065739.822), -1934.473, (4180, 0.418, 472.418), 578, false, 608, 0.244}
25  2 {(-113833, -63.565, 23345103.037), (-426921, 122679365.321), 3327.570, (-2155, -0.215, -633.216), 646, false, 640, 0.190}
25 16 {(-117772, -65.765, 23345100.838), (-493304, 95594272.692), 2592.793, (-1865, -0.186, -633.187), 623, false, 560, 0.244}
26  2 {(67617, 37.758, 20662003.308), (277463, 108579565.367), -1538.436, (7546, 0.755, 292.755), 596, false, 736, 0.190}
26 16 {(63330, 35.364, 20662000.914), (216377, 84607418.613), -1198.760, (7494, 0.749, 292.749), 596, false, 672, 0.244}
29  2 {(224508, 125.367, 21136079.188), (929467, 111070868.860), 2016.750, (-7747, -0.775, -383.775), 628, false, 736, 0.190}
29 16 {(216288, 120.777, 21136074.598), (912065, 86548719.034), 1571.474, (-7701, -0.770, -383.770), 628, false, 656, 0.244}
31  2 {(-115909, -64.724, 21670772.711), (-602908, 113880577.055), 2325.559, (-5391, -0.539, -442.539), 624, false, 736, 0.190}
31 16 {(-124734, -69.652, 21670767.783), (-527266, 88738155.231), 1812.168, (-5499, -0.550, -442.550), 624, false, 640, 0.244}`

const WantMessageFrameType1077Display = MessageFrameType1077Heading +
	MessageFrameType1077SentAt +
	MessageFrameType1077StartOfWeek +
	MessageFrameType1077HexDump +
	WantHeaderFromMessageFrameType1077 + "\n" +
	WantSatelliteListFromMessageFrameType1077 + "\n" +
	WantSignalListFromMessageFrameType1077 + "\n"

var MessageBatchWith1077 = []byte{

	// The first message in this batch is the contents of MessageFrameType1077 above so
	// the header, satellite and signal display given above should also match it.

	// RTCM message type 1077 - signals from GPS satellites:
	0xd3, 0x00, 0xdc, // header - message length (0xdc - 220)
	// message, starting with  12-bit message type (0x435 - 1077), padded with null bytes
	// at the end.
	0x43, 0x50, 0x00, 0x67, 0x00, 0x97, 0x62, 0x00, 0x00, 0x08, 0x40, 0xa0, 0x65,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x80, 0x00, 0x6d, 0xff, 0xa8, 0xaa, 0x26, 0x23, 0xa6, 0xa2,
	0x23, 0x24, 0x00, 0x00, 0x00, 0x00, 0x36, 0x68, 0xcb, 0x83, 0x7a, 0x6f, 0x9d, 0x7c, 0x04, 0x92,
	0xfe, 0xf2, 0x05, 0xb0, 0x4a, 0xa0, 0xec, 0x7b, 0x0e, 0x09, 0x27, 0xd0, 0x3f, 0x23, 0x7c, 0xb9,
	0x6f, 0xbd, 0x73, 0xee, 0x1f, 0x01, 0x64, 0x96, 0xf5, 0x7b, 0x27, 0x46, 0xf1, 0xf2, 0x1a, 0xbf,
	0x19, 0xfa, 0x08, 0x41, 0x08, 0x7b, 0xb1, 0x1b, 0x67, 0xe1, 0xa6, 0x70, 0x71, 0xd9, 0xdf, 0x0c,
	0x61, 0x7f, 0x19, 0x9c, 0x7e, 0x66, 0x66, 0xfb, 0x86, 0xc0, 0x04, 0xe9, 0xc7, 0x7d, 0x85, 0x83,
	0x7d, 0xac, 0xad, 0xfc, 0xbe, 0x2b, 0xfc, 0x3c, 0x84, 0x02, 0x1d, 0xeb, 0x81, 0xa6, 0x9c, 0x87,
	0x17, 0x5d, 0x86, 0xf5, 0x60, 0xfb, 0x66, 0x72, 0x7b, 0xfa, 0x2f, 0x48, 0xd2, 0x29, 0x67, 0x08,
	0xc8, 0x72, 0x15, 0x0d, 0x37, 0xca, 0x92, 0xa4, 0xe9, 0x3a, 0x4e, 0x13, 0x80, 0x00, 0x14, 0x04,
	0xc0, 0xe8, 0x50, 0x16, 0x04, 0xc1, 0x40, 0x46, 0x17, 0x05, 0x41, 0x70, 0x52, 0x17, 0x05, 0x01,
	0xef, 0x4b, 0xde, 0x70, 0x4c, 0xb1, 0xaf, 0x84, 0x37, 0x08, 0x2a, 0x77, 0x95, 0xf1, 0x6e, 0x75,
	0xe8, 0xea, 0x36, 0x1b, 0xdc, 0x3d, 0x7a, 0xbc, 0x75, 0x42, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	// 24-bit Cyclic Redundancy Check
	0xfe, 0x69, 0xe8,

	's', 'o', 'm', 'e', ' ', 'j', 'u', 'n', 'k', // junk which should be returned as a non-RTCM message.
}

var MessageFrameType1074_1 = []byte{
	// A hand-crafted message type 1074 - MSM 4 GPS with leader and CRC.
	0xd3, 0x04, 0x32, // leader
	// The header is 185 bits long, with 2 cell mask bits.
	// Type is 1074, Station ID is 1:
	// 0: 1000 0110 010|0000 0000 0001
	0x43, 0x20, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00,
	//                   64 bit satellite mask with satellite 4 marked.
	// 64: 000|0 0|0|00   0|000 1000   0000 0000   0000 0000 ...
	0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//               32 bit signal mask with signals 2 and 16 marked.
	// 0000 0000   0|010 0000   0000 0000   1000 0000
	/* 128 */ 0x00, 0x20, 0x00, 0x80,
	//
	//                    2 bit cell mask
	//                       Satellite cell - whole 1, frac 0.25
	//                                                   Signal cell
	// 160: 0000 0000   0|11|0 0000  001|0 1000   0000 0|000
	0x00, 0x60, 0x28, 0x00,
	// 192: 0100 0000   0000|0001   0000 0000   000|0 0010
	0x40, 0x01, 0x00, 0x02,
	// 224: 0000 0000   0000 0000  0|100 0000   0000 0000
	0x00, 0x00, 0x40, 0x00,
	// 276: 0000 000|0   011|0 100|0|  1|000 111|0  1000 0|000
	0x00, 0x68, 0x8e, 0x80,
	// CRC
	0x6e, 0x75, 0x44,
}

// MessageFrameType1074_2 is a message frame containing a leader, a message of type
// 1074 (a GPS MessageFrameType1074_2) and a valid CRC.
var MessageFrameType1074_2 = []byte{
	// 3-byte leader with message length 36 bytes.
	0xd3, 0x00, 0x24,
	// This is the message body of an MSM - no leader or CRC.
	// The header is 185 bits long, with 2 cell mask bits.
	// The type is 1074, Station ID is 1:
	// 0: 1000 0110 010|0000 0000 0001
	0x43, 0x20, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00,
	//                   64 bit satellite mask with satellite 4 marked.
	// 64: 000|0 0|0|00   0|000 1000   0000 0000   0000 0000 ...
	0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//               32 bit signal mask with signals 2 and 16 marked.
	// 0000 0000   0|010 0000   0000 0000   1000 0000
	/* 128 */ 0x00, 0x20, 0x00, 0x80,
	//
	//                    2 bit cell mask
	//                       Satellite cell - whole 1, frac 0.25
	//                                                   Signal cell
	// 160: 0000 0000   0|11|0 0000  001|0 1000   0000 0|000
	0x00, 0x60, 0x28, 0x00,
	// 192: 0100 0000   0000|0001   0000 0000   000|0 0010
	0x40, 0x01, 0x00, 0x02,
	// 224: 0000 0000   0000 0000  0|100 0000   0000 0000
	0x00, 0x00, 0x40, 0x00,
	// 276: 0000 000|0   011|0 100|0|  1|000 111|0  1000 0|000
	0x00, 0x68, 0x8e, 0x80,
	// 3-byte CRC.
	0x83, 0xf7, 0x4b,
}

// MessageBatch contain a batch of RTCM3 messages.  In each message byte 0
// is 0xd3.  Bytes 1 and 2 form a sixteen bit unsigned number, the
// message length, but this is limited to 1023 so the top six bits
// are always 0.  The message follows and then three bytes of CRC.
var MessageBatch = []byte{
	0xd3, 0x00, 0x8a, 0x43, 0x20, 0x00, 0x8a, 0x0e, 0x1a, 0x26, 0x00, 0x00, 0x2f, 0x40, 0x00, 0x06,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x80, 0x00, 0x5f, 0xff, 0xa4, 0xa7, 0x25, 0xa4, 0xa4, 0x22,
	0xa9, 0x26, 0x30, 0x64, 0xab, 0x9f, 0x4e, 0x1d, 0xef, 0x58, 0xd5, 0x28, 0x60, 0x34, 0x00, 0xff,
	0xff, 0x98, 0x63, 0x48, 0xb0, 0x91, 0xab, 0x63, 0x4c, 0x72, 0x8c, 0x63, 0xa6, 0x24, 0x26, 0x44,
	0x04, 0x7f, 0x68, 0xf0, 0xb0, 0x42, 0xa0, 0x51, 0xfc, 0x1f, 0x39, 0x00, 0xc8, 0x90, 0x04, 0x21,
	0xa0, 0x6c, 0x9e, 0x81, 0x64, 0x7f, 0x06, 0x00, 0xe8, 0x1b, 0xd0, 0x7f, 0x35, 0x6e, 0xbd, 0x20,
	0x2a, 0x09, 0xcf, 0x34, 0x28, 0xa6, 0x10, 0x80, 0xf6, 0x41, 0xd9, 0xe4, 0x01, 0xa7, 0x20, 0x07,
	0x4e, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x75, 0x14, 0xd7, 0x3d, 0x76,
	0x65, 0x56, 0x16, 0x4b, 0x35, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x51, 0xa5,

	0xd3, 0x00, 0x98, 0x43, 0xc0, 0x00, 0xd1, 0x07, 0x8e, 0xe6, 0x00, 0x00, 0x60, 0xb0, 0x61, 0x80,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x7f, 0x7f, 0xe8, 0x09, 0x48, 0xc8, 0xa9, 0x28,
	0xc9, 0xc9, 0xe9, 0x10, 0x6b, 0x10, 0x9d, 0xac, 0x13, 0x6a, 0xdb, 0xd9, 0xa8, 0xc0, 0xa1, 0x5c,
	0xa2, 0xb0, 0x1f, 0x3b, 0x3e, 0x6e, 0x70, 0xa8, 0xdf, 0xf5, 0x96, 0x87, 0x62, 0x96, 0xc3, 0x52,
	0x9d, 0x65, 0x05, 0x07, 0x14, 0x0e, 0x07, 0xd6, 0xa1, 0xaf, 0x83, 0x4c, 0x36, 0x96, 0xb0, 0xaf,
	0xf9, 0xc2, 0xb6, 0x78, 0xfc, 0x34, 0x47, 0xf8, 0x3b, 0xdf, 0x96, 0x90, 0x7e, 0x69, 0x76, 0xf2,
	0xe2, 0x67, 0xd6, 0xfc, 0x9f, 0x71, 0x76, 0x02, 0xca, 0x91, 0x0a, 0x5d, 0x54, 0x1c, 0xaa, 0x20,
	0x6c, 0x83, 0x7d, 0x65, 0x1f, 0xf5, 0xd2, 0x8f, 0xd8, 0x04, 0x4f, 0x52, 0x45, 0x7f, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x32, 0xef, 0xfc, 0x00, 0x01, 0x74, 0xd6, 0xd7, 0x8d, 0x57, 0xe3, 0x56, 0x15,
	0x51, 0x2c, 0x0d, 0xdf, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0xc9, 0x01,

	0xd3, 0x00,
	0xdc, 0x44, 0x90, 0x00, 0x8a, 0x0e, 0x1a, 0x26, 0x00, 0x00, 0x54, 0x41, 0x00, 0x81, 0x08, 0x00,
	0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x3f, 0xff, 0xae, 0x2c, 0x27, 0x26, 0x2a, 0xaa, 0xab, 0xad,
	0x00, 0x00, 0x00, 0x00, 0x46, 0xf8, 0x52, 0x78, 0x4f, 0x1c, 0xfe, 0x2d, 0x0d, 0x2c, 0x7e, 0x1e,
	0x0e, 0x50, 0x0d, 0x9f, 0x55, 0x81, 0xae, 0x11, 0xe0, 0x1f, 0x7e, 0xc5, 0xfb, 0x67, 0xfe, 0x88,
	0x52, 0x68, 0x56, 0x99, 0x89, 0x90, 0x98, 0x44, 0xde, 0xf5, 0xba, 0xef, 0x0e, 0xae, 0x2d, 0x08,
	0x62, 0x8f, 0xf6, 0x1c, 0x1e, 0x63, 0xd7, 0xd1, 0x30, 0xe1, 0x93, 0x3d, 0x56, 0x9a, 0xa4, 0x6a,
	0x01, 0xff, 0xe8, 0x88, 0x97, 0xa1, 0x66, 0x9f, 0xa6, 0x31, 0xf8, 0x6a, 0x37, 0x70, 0x6d, 0x55,
	0xd7, 0xc2, 0x49, 0x77, 0xc5, 0x37, 0x87, 0x8c, 0x67, 0x0f, 0x8d, 0xed, 0x37, 0x76, 0x65, 0x8f,
	0x94, 0x5a, 0x58, 0x4e, 0x99, 0x88, 0x52, 0x6e, 0x07, 0xa5, 0xd3, 0xaf, 0xa1, 0xb4, 0x44, 0x17,
	0x15, 0x45, 0xf3, 0x5c, 0xd9, 0x42, 0x50, 0x92, 0x5c, 0x96, 0xe5, 0xc0, 0x12, 0x0c, 0x8b, 0x44,
	0xd1, 0x20, 0x00, 0x1f, 0x0a, 0x42, 0xd0, 0xc0, 0x2f, 0x0b, 0x82, 0xd0, 0xac, 0x2d, 0x08, 0xc2,
	0x00, 0xa8, 0x2c, 0x09, 0x42, 0xb0, 0xe4, 0xbe, 0x8c, 0x45, 0x1d, 0x98, 0xc4, 0xf1, 0x8c, 0x3a,
	0x41, 0xb4, 0x82, 0x1f, 0x84, 0x3e, 0xc0, 0x6c, 0x48, 0xd7, 0x50, 0xd1, 0x11, 0x97, 0xfc, 0xf7,
	0x39, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8e, 0x85, 0xa1,

	0xd3, 0x00, 0x7b, 0x46, 0x40, 0x00, 0x8a, 0x0d, 0x3f, 0x66, 0x00, 0x00, 0x01, 0x30, 0x04, 0x28,
	0x08, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x3f, 0x55, 0x0d, 0x0c, 0xaa, 0x98, 0x9e, 0xa6,
	0xaf, 0x7b, 0x2d, 0xdd, 0x62, 0x1a, 0xdb, 0x3b, 0x26, 0x08, 0xb6, 0x4d, 0xe7, 0x1b, 0x44, 0x30,
	0xf6, 0x60, 0x40, 0x06, 0xce, 0x4b, 0xbb, 0x0f, 0x87, 0xb5, 0xb0, 0x58, 0xfd, 0xfd, 0xf9, 0xf4,
	0xf6, 0xff, 0x37, 0xc2, 0x2e, 0x0e, 0xfa, 0xb1, 0x41, 0x37, 0x24, 0x0a, 0x13, 0xfb, 0xc4, 0xad,
	0xbf, 0xe3, 0x72, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0xe4, 0xd1, 0xc7, 0x7e, 0x57, 0x57, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x60,
	0xc0, 0xd3, 0x00, 0xc3, 0x46, 0x70, 0x00, 0x8a, 0x0d, 0x3f, 0x64, 0x00, 0x00, 0x01, 0x30, 0x04,
	0x28, 0x08, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x3f, 0x55, 0x0d, 0x0c, 0xaa, 0x98, 0x9e,
	0xa6, 0xae, 0x00, 0x00, 0x00, 0x17, 0xb2, 0xdd, 0xd6, 0x21, 0xad, 0xb3, 0xb2, 0x60, 0x81, 0x4e,
	0x08, 0xdf, 0xb4, 0x9f, 0x4f, 0x84, 0x64, 0x01, 0x37, 0xc5, 0x22, 0xd8, 0xe9, 0xbc, 0xe0, 0x1b,
	0x44, 0x21, 0x87, 0xaf, 0xf8, 0x10, 0x0e, 0x0d, 0x9a, 0x04, 0xbb, 0xa1, 0x87, 0xbe, 0x5e, 0xd6,
	0xa2, 0x0b, 0x1f, 0xbd, 0xef, 0xcf, 0xa5, 0xed, 0xfe, 0x65, 0xe1, 0x17, 0x03, 0xdf, 0x56, 0x2c,
	0x09, 0xb9, 0x20, 0x14, 0x27, 0xf1, 0xe2, 0x56, 0xdb, 0xfc, 0x6e, 0x40, 0xf3, 0x41, 0xd0, 0xa4,
	0xe9, 0x3b, 0xd0, 0x51, 0x84, 0x8c, 0xe2, 0x80, 0x1c, 0x09, 0x82, 0x30, 0x8c, 0x2f, 0x0c, 0x82,
	0xe0, 0xac, 0x20, 0x03, 0x68, 0x08, 0x9d, 0x11, 0x28, 0xf4, 0x0a, 0xe7, 0x37, 0xda, 0xf4, 0xbf,
	0x9a, 0x0f, 0x9f, 0xb4, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0x9d, 0x1c,
}

// This is a real message frame collected on the 13th November 2020.  It
// contains a message of type 1077 (GPS MSM7).
var MessageFrame1077 = []byte{

	// type 1077 - GPS.  Converted to RINEX, this gives:
	//
	// > 2020 11 13  0  0 23.0000000  0 26
	// G 4  24410527.355   128278179.264         709.992          40.000
	// G 9
	// G16  22915780.724   120423177.179       -3139.070          40.000
	// G18  21506547.550   113017684.727       -2482.645          44.000
	// G25  23345103.037   122679365.321        3327.570          40.000
	// G26  20662003.308   108579565.367       -1538.436          46.000
	// G29  21136079.188   111070868.860        2016.750          46.000
	// G31  21670772.711   113880577.055        2325.559          46.000
	0xd3, 0x00, 0xdc, 0x43, 0x50, 0x00, 0x67, 0x00, 0x97, 0x62, 0x00, 0x00, 0x08, 0x40, 0xa0, 0x65,
	//        signal mask  cell mask (16 bits)
	//           0000 0000  0010 00|00 1000 0000 0000 0000 01|10 1101 11|11 1111
	//
	//            32-bit signal mask: signals 1 and 16.       16-bit cell mask - 0xdbff - 1101 1011 1111 1111
	//          0|010 0000  0000 0000  1000 0000  0000 0000 0|110 1101 1111 1111 1|010 1000
	//          |                                           |
	//           -----------v                       v-------    |Satellite Cells  16X8, 16X4, 16X10, 16X14 - 16X36 bits
	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x80, 0x00, 0x6d, 0xff, 0xa8, 0xaa, 0x26, 0x23, 0xa6, 0xa2,
	0x23, 0x24, 0x00, 0x00, 0x00, 0x00, 0x36, 0x68, 0xcb, 0x83, 0x7a, 0x6f, 0x9d, 0x7c, 0x04, 0x92,
	0xfe, 0xf2, 0x05, 0xb0, 0x4a, 0xa0, 0xec, 0x7b, 0x0e, 0x09, 0x27, 0xd0, 0x3f, 0x23, 0x7c, 0xb9,
	0x6f, 0xbd, 0x73, 0xee, 0x1f, 0x01, 0x64, 0x96, 0xf5, 0x7b, 0x27, 0x46, 0xf1, 0xf2, 0x1a, 0xbf,
	0x19, 0xfa, 0x08, 0x41, 0x08, 0x7b, 0xb1, 0x1b, 0x67, 0xe1, 0xa6, 0x70, 0x71, 0xd9, 0xdf, 0x0c,
	0x61, 0x7f, 0x19, 0x9c, 0x7e, 0x66, 0x66, 0xfb, 0x86, 0xc0, 0x04, 0xe9, 0xc7, 0x7d, 0x85, 0x83,
	0x7d, 0xac, 0xad, 0xfc, 0xbe, 0x2b, 0xfc, 0x3c, 0x84, 0x02, 0x1d, 0xeb, 0x81, 0xa6, 0x9c, 0x87,
	0x17, 0x5d, 0x86, 0xf5, 0x60, 0xfb, 0x66, 0x72, 0x7b, 0xfa, 0x2f, 0x48, 0xd2, 0x29, 0x67, 0x08,
	0xc8, 0x72, 0x15, 0x0d, 0x37, 0xca, 0x92, 0xa4, 0xe9, 0x3a, 0x4e, 0x13, 0x80, 0x00, 0x14, 0x04,
	0xc0, 0xe8, 0x50, 0x16, 0x04, 0xc1, 0x40, 0x46, 0x17, 0x05, 0x41, 0x70, 0x52, 0x17, 0x05, 0x01,
	0xef, 0x4b, 0xde, 0x70, 0x4c, 0xb1, 0xaf, 0x84, 0x37, 0x08, 0x2a, 0x77, 0x95, 0xf1, 0x6e, 0x75,
	0xe8, 0xea, 0x36, 0x1b, 0xdc, 0x3d, 0x7a, 0xbc, 0x75, 0x42, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
	0x69, 0xe8,
}

var GlonassMSM7WithIllegalDay = []byte{
	// message 3: Type 1087 - Glonass.  This is derived from the Glonass message in
	// MessageBatchWithJunk below but the day in the timestamp is 7, which is illegal.
	//
	// R 5  23482521.703   125527502.441         886.891          36.000                                                                    23482518.744    97632475.638         689.879          37.000
	// R12  20829833.360   111269260.007        3266.930          48.000       20829832.826    86542668.996        2540.913          39.000
	// R13  19220908.037   102638574.587        -569.980          36.000       19220907.074    79830006.582        -443.200          33.000
	// R14  22228766.616   118491839.342       -3852.575          42.000       22228768.714    92160317.831       -2996.456          39.000
	// R22  20286899.487   108292911.973        2735.571          42.000       20286900.360    84227771.187        2127.874          29.000
	// R23  19954308.877   106742118.811       -2561.292          48.000       19954309.753    83021654.098       -1992.063          37.000
	// R24  22984791.448   122910027.290       -4164.178          40.000       22984791.701    95596674.871       -3238.890          39.000
	0xd3, 0x00, 0xc3,
	//               | timestamp: 3-bit day, 27-bit milliseconds.
	0x43, 0xf0, 0x00, 0xf0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x04, 0x0e, 0x03, 0x80,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x7f, 0xfe, 0x9c, 0x8a, 0x80, 0x94, 0x86, 0x84,
	0x99, 0x0c, 0xa0, 0x95, 0x2a, 0x8b, 0xd8, 0x3a, 0x92, 0xf5, 0x74, 0x7d, 0x56, 0xfe, 0xb7, 0xec,
	0xe8, 0x0d, 0x41, 0x69, 0x7c, 0x00, 0x0e, 0xf0, 0x61, 0x42, 0x9c, 0xf0, 0x27, 0x38, 0x86, 0x2a,
	0xda, 0x62, 0x36, 0x3c, 0x8f, 0xeb, 0xc8, 0x27, 0x1b, 0x77, 0x6f, 0xb9, 0x4c, 0xbe, 0x36, 0x2b,
	0xe4, 0x26, 0x1d, 0xc1, 0x4f, 0xdc, 0xd9, 0x01, 0x16, 0x24, 0x11, 0x9a, 0xe0, 0x91, 0x02, 0x00,
	0x7a, 0xea, 0x61, 0x9d, 0xb4, 0xe1, 0x52, 0xf6, 0x1f, 0x22, 0xae, 0xdf, 0x26, 0x28, 0x3e, 0xe0,
	0xf6, 0xbe, 0xdf, 0x90, 0xdf, 0xb8, 0x01, 0x3f, 0x8e, 0x86, 0xbf, 0x7e, 0x67, 0x1f, 0x83, 0x8f,
	0x20, 0x51, 0x53, 0x60, 0x46, 0x60, 0x30, 0x43, 0xc3, 0x3d, 0xcf, 0x12, 0x84, 0xb7, 0x10, 0xc4,
	0x33, 0x53, 0x3d, 0x25, 0x48, 0xb0, 0x14, 0x00, 0x00, 0x04, 0x81, 0x28, 0x60, 0x13, 0x84, 0x81,
	0x08, 0x54, 0x13, 0x85, 0x40, 0xe8, 0x60, 0x12, 0x85, 0x01, 0x38, 0x5c, 0x67, 0xb7, 0x67, 0xa5,
	0xff, 0x4e, 0x71, 0xcd, 0xd3, 0x78, 0x27, 0x29, 0x0e, 0x5c, 0xed, 0xd9, 0xd7, 0xcc, 0x7e, 0x04,
	0xf8, 0x09, 0xc3, 0x73, 0xa0, 0x40,
	// CRC
	0xcf, 0x64, 0x00,
}

const GlonassMSM7WithIllegalDayDisplay = `Message type 1087, GLONASS Full Pseudoranges and PhaseRanges plus Carrier to Noise Ratio (high resolution)
The type 7 Multiple Signal Message format for the Russian GLONASS system.
Time (timestamp out of range)
Start of Glonass week 2023-02-11 21:00:00 +0000 UTC plus timestamp out of range - 0x3c000001 (7/67108865)
Frame length 201 bytes:
00000000  d3 00 c3 43 f0 00 f0 00  00 06 00 00 04 0e 03 80  |...C............|
00000010  00 00 00 00 20 80 00 00  7f fe 9c 8a 80 94 86 84  |.... ...........|
00000020  99 0c a0 95 2a 8b d8 3a  92 f5 74 7d 56 fe b7 ec  |....*..:..t}V...|
00000030  e8 0d 41 69 7c 00 0e f0  61 42 9c f0 27 38 86 2a  |..Ai|...aB..'8.*|
00000040  da 62 36 3c 8f eb c8 27  1b 77 6f b9 4c be 36 2b  |.b6<...'.wo.L.6+|
00000050  e4 26 1d c1 4f dc d9 01  16 24 11 9a e0 91 02 00  |.&..O....$......|
00000060  7a ea 61 9d b4 e1 52 f6  1f 22 ae df 26 28 3e e0  |z.a...R.."..&(>.|
00000070  f6 be df 90 df b8 01 3f  8e 86 bf 7e 67 1f 83 8f  |.......?...~g...|
00000080  20 51 53 60 46 60 30 43  c3 3d cf 12 84 b7 10 c4  | QS` + "`" + `F` + "`" + `0C.=......|
00000090  33 53 3d 25 48 b0 14 00  00 04 81 28 60 13 84 81  |3S=%H......(` + "`" + `...|
000000a0  08 54 13 85 40 e8 60 12  85 01 38 5c 67 b7 67 a5  |.T..@.` + "`" + `...8\g.g.|
000000b0  ff 4e 71 cd d3 78 27 29  0e 5c ed d9 d7 cc 7e 04  |.Nq..x').\....~.|
000000c0  f8 09 c3 73 a0 40 cf 64  00                       |...s.@.d.|

timestamp out of range
`

// This is real data collected on the 13th November 2020 with some junk added
// to check that junk is handled properly as well as good data.
// The first message is type 1077 - GPS MSM7.  It has a timestamp of
// 2020/11/13 00:00:05 UTC and that GPS week starts at 2020/11/07 23:59:42 UTC.
var MessageBatchWithJunk = []byte{

	// message 1: type 1077 - GPS.  Converted to RINEX, this gives:
	//
	// > 2020 11 13  0  0 23.0000000  0 26
	// G 4  24410527.355   128278179.264         709.992          40.000
	// G 9
	// G16  22915780.724   120423177.179       -3139.070          40.000
	// G18  21506547.550   113017684.727       -2482.645          44.000
	// G25  23345103.037   122679365.321        3327.570          40.000
	// G26  20662003.308   108579565.367       -1538.436          46.000
	// G29  21136079.188   111070868.860        2016.750          46.000
	// G31  21670772.711   113880577.055        2325.559          46.000
	0xd3, 0x00, 0xdc, 0x43, 0x50, 0x00, 0x67, 0x00, 0x97, 0x62, 0x00, 0x00, 0x08, 0x40, 0xa0, 0x65,
	//        signal mask  cell mask (16 bits)
	//           0000 0000  0010 00|00 1000 0000 0000 0000 01|10 1101 11|11 1111
	//
	//            32-bit signal mask: signals 1 and 16.       16-bit cell mask - 0xdbff - 1101 1011 1111 1111
	//          0|010 0000  0000 0000  1000 0000  0000 0000 0|110 1101 1111 1111 1|010 1000
	//          |                                           |
	//           -----------v                       v-------    |Satellite Cells  16X8, 16X4, 16X10, 16X14 - 16X36 bits
	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x80, 0x00, 0x6d, 0xff, 0xa8, 0xaa, 0x26, 0x23, 0xa6, 0xa2,
	0x23, 0x24, 0x00, 0x00, 0x00, 0x00, 0x36, 0x68, 0xcb, 0x83, 0x7a, 0x6f, 0x9d, 0x7c, 0x04, 0x92,
	0xfe, 0xf2, 0x05, 0xb0, 0x4a, 0xa0, 0xec, 0x7b, 0x0e, 0x09, 0x27, 0xd0, 0x3f, 0x23, 0x7c, 0xb9,
	0x6f, 0xbd, 0x73, 0xee, 0x1f, 0x01, 0x64, 0x96, 0xf5, 0x7b, 0x27, 0x46, 0xf1, 0xf2, 0x1a, 0xbf,
	0x19, 0xfa, 0x08, 0x41, 0x08, 0x7b, 0xb1, 0x1b, 0x67, 0xe1, 0xa6, 0x70, 0x71, 0xd9, 0xdf, 0x0c,
	0x61, 0x7f, 0x19, 0x9c, 0x7e, 0x66, 0x66, 0xfb, 0x86, 0xc0, 0x04, 0xe9, 0xc7, 0x7d, 0x85, 0x83,
	0x7d, 0xac, 0xad, 0xfc, 0xbe, 0x2b, 0xfc, 0x3c, 0x84, 0x02, 0x1d, 0xeb, 0x81, 0xa6, 0x9c, 0x87,
	0x17, 0x5d, 0x86, 0xf5, 0x60, 0xfb, 0x66, 0x72, 0x7b, 0xfa, 0x2f, 0x48, 0xd2, 0x29, 0x67, 0x08,
	0xc8, 0x72, 0x15, 0x0d, 0x37, 0xca, 0x92, 0xa4, 0xe9, 0x3a, 0x4e, 0x13, 0x80, 0x00, 0x14, 0x04,
	0xc0, 0xe8, 0x50, 0x16, 0x04, 0xc1, 0x40, 0x46, 0x17, 0x05, 0x41, 0x70, 0x52, 0x17, 0x05, 0x01,
	0xef, 0x4b, 0xde, 0x70, 0x4c, 0xb1, 0xaf, 0x84, 0x37, 0x08, 0x2a, 0x77, 0x95, 0xf1, 0x6e, 0x75,
	0xe8, 0xea, 0x36, 0x1b, 0xdc, 0x3d, 0x7a, 0xbc, 0x75, 0x42, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
	0x69, 0xe8,

	// message 2: junk which should be returned as a non-RTCM message.
	'j',

	// message 3: Type 1087 - Glonass
	//
	// R 5  23482521.703   125527502.441         886.891          36.000                                                                    23482518.744    97632475.638         689.879          37.000
	// R12  20829833.360   111269260.007        3266.930          48.000       20829832.826    86542668.996        2540.913          39.000
	// R13  19220908.037   102638574.587        -569.980          36.000       19220907.074    79830006.582        -443.200          33.000
	// R14  22228766.616   118491839.342       -3852.575          42.000       22228768.714    92160317.831       -2996.456          39.000
	// R22  20286899.487   108292911.973        2735.571          42.000       20286900.360    84227771.187        2127.874          29.000
	// R23  19954308.877   106742118.811       -2561.292          48.000       19954309.753    83021654.098       -1992.063          37.000
	// R24  22984791.448   122910027.290       -4164.178          40.000       22984791.701    95596674.871       -3238.890          39.000
	0xd3, 0x00, 0xc3, 0x43, 0xf0, 0x00, 0xa2, 0x93, 0x7c, 0x22, 0x00, 0x00, 0x04, 0x0e, 0x03, 0x80,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x7f, 0xfe, 0x9c, 0x8a, 0x80, 0x94, 0x86, 0x84,
	0x99, 0x0c, 0xa0, 0x95, 0x2a, 0x8b, 0xd8, 0x3a, 0x92, 0xf5, 0x74, 0x7d, 0x56, 0xfe, 0xb7, 0xec,
	0xe8, 0x0d, 0x41, 0x69, 0x7c, 0x00, 0x0e, 0xf0, 0x61, 0x42, 0x9c, 0xf0, 0x27, 0x38, 0x86, 0x2a,
	0xda, 0x62, 0x36, 0x3c, 0x8f, 0xeb, 0xc8, 0x27, 0x1b, 0x77, 0x6f, 0xb9, 0x4c, 0xbe, 0x36, 0x2b,
	0xe4, 0x26, 0x1d, 0xc1, 0x4f, 0xdc, 0xd9, 0x01, 0x16, 0x24, 0x11, 0x9a, 0xe0, 0x91, 0x02, 0x00,
	0x7a, 0xea, 0x61, 0x9d, 0xb4, 0xe1, 0x52, 0xf6, 0x1f, 0x22, 0xae, 0xdf, 0x26, 0x28, 0x3e, 0xe0,
	0xf6, 0xbe, 0xdf, 0x90, 0xdf, 0xb8, 0x01, 0x3f, 0x8e, 0x86, 0xbf, 0x7e, 0x67, 0x1f, 0x83, 0x8f,
	0x20, 0x51, 0x53, 0x60, 0x46, 0x60, 0x30, 0x43, 0xc3, 0x3d, 0xcf, 0x12, 0x84, 0xb7, 0x10, 0xc4,
	0x33, 0x53, 0x3d, 0x25, 0x48, 0xb0, 0x14, 0x00, 0x00, 0x04, 0x81, 0x28, 0x60, 0x13, 0x84, 0x81,
	0x08, 0x54, 0x13, 0x85, 0x40, 0xe8, 0x60, 0x12, 0x85, 0x01, 0x38, 0x5c, 0x67, 0xb7, 0x67, 0xa5,
	0xff, 0x4e, 0x71, 0xcd, 0xd3, 0x78, 0x27, 0x29, 0x0e, 0x5c, 0xed, 0xd9, 0xd7, 0xcc, 0x7e, 0x04,
	0xf8, 0x09, 0xc3, 0x73, 0xa0, 0x40, 0x70, 0xd9, 0x6d,

	// message 4: junk which should be returned as a non-RTCM message.
	'j', 'u', 'n', 'k',

	//message 5: type 1097 - Galileo
	0xd3, 0x00, 0xc3, 0x44, 0x90, 0x00, 0x67, 0x00, 0x97, 0x62, 0x00, 0x00, 0x21, 0x18, 0x00, 0xc0,
	0x08, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x7f, 0xfe, 0xae, 0xbe, 0x90, 0x98, 0xa6, 0x9c,
	0xb4, 0x00, 0x00, 0x00, 0x08, 0xc1, 0x4b, 0xc1, 0x32, 0xf8, 0x0b, 0x08, 0xc5, 0x83, 0xc8, 0x01,
	0xe8, 0x25, 0x3f, 0x74, 0x7c, 0xc4, 0x02, 0xa0, 0x4b, 0xc1, 0x47, 0x90, 0x12, 0x86, 0x62, 0x72,
	0x92, 0x28, 0x53, 0x18, 0x9d, 0x8d, 0x85, 0x82, 0xc6, 0xe1, 0x8a, 0x6a, 0x2f, 0xdd, 0x5e, 0xcd,
	0xd3, 0xe1, 0x1a, 0x15, 0x01, 0xa1, 0x2b, 0xdc, 0x56, 0x3f, 0xc4, 0xea, 0xc0, 0x5e, 0xdc, 0x40,
	0x48, 0xd3, 0x80, 0xb2, 0x25, 0x60, 0x9c, 0x7b, 0x7e, 0x32, 0xdd, 0x3e, 0x22, 0xf7, 0x01, 0xb6,
	0xf3, 0x81, 0xaf, 0xb7, 0x1f, 0x78, 0xe0, 0x7f, 0x6c, 0xaa, 0xfe, 0x9a, 0x7e, 0x7e, 0x94, 0x9f,
	0xbf, 0x06, 0x72, 0x3f, 0x15, 0x8c, 0xb1, 0x44, 0x56, 0xe1, 0xb1, 0x92, 0xdc, 0xb5, 0x37, 0x4a,
	0xd4, 0x5d, 0x17, 0x38, 0x4e, 0x30, 0x24, 0x14, 0x00, 0x04, 0xc1, 0x50, 0x3e, 0x0f, 0x85, 0x41,
	0x40, 0x52, 0x13, 0x85, 0x61, 0x50, 0x5a, 0x16, 0x04, 0xa1, 0x38, 0x12, 0x5b, 0x24, 0x7e, 0x03,
	0x6c, 0x07, 0x89, 0xdb, 0x93, 0xbd, 0xba, 0x0d, 0x34, 0x27, 0x68, 0x75, 0xd0, 0xa6, 0x72, 0x24,
	0xe4, 0x88, 0xdc, 0x61, 0xa9, 0x40, 0xb1, 0x9d, 0x0d,

	// Message 6: type 1127 - Beidou
	0xd3, 0x00, 0xaa, 0x46, 0x70, 0x00, 0x66, 0xff, 0xbc, 0xa0, 0x00, 0x00, 0x00, 0x04, 0x00, 0x26,
	0x18, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x75, 0x53, 0xfa, 0x82, 0x42, 0x62, 0x9a, 0x80,
	0x00, 0x00, 0x06, 0x95, 0x4e, 0xa7, 0xa0, 0xbf, 0x1e, 0x78, 0x7f, 0x0a, 0x10, 0x08, 0x18, 0x7f,
	0x35, 0x04, 0xab, 0xee, 0x50, 0x77, 0x8a, 0x86, 0xf0, 0x51, 0xf1, 0x4d, 0x82, 0x46, 0x38, 0x29,
	0x0a, 0x8c, 0x35, 0x57, 0x23, 0x87, 0x82, 0x24, 0x2a, 0x01, 0xb5, 0x40, 0x07, 0xeb, 0xc5, 0x01,
	0x37, 0xa8, 0x80, 0xb3, 0x88, 0x03, 0x23, 0xc4, 0xfc, 0x61, 0xe0, 0x4f, 0x33, 0xc4, 0x73, 0x31,
	0xcd, 0x90, 0x54, 0xb2, 0x02, 0x70, 0x90, 0x26, 0x0b, 0x42, 0xd0, 0x9c, 0x2b, 0x0c, 0x02, 0x97,
	0xf4, 0x08, 0x3d, 0x9e, 0xc7, 0xb2, 0x6e, 0x44, 0x0f, 0x19, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0x1e, 0xd8,

	// Message 7: Incomplete - should be returned as a non-RTCM message.
	0xd3, 0x00, 0xaa, 0x46, 0x70, 0x00, 0x66, 0xff, 0xbc, 0xa0, 0x00, 0x00, 0x00, 0x04, 0x00, 0x26,
	0x18, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x75, 0x53, 0xfa, 0x82, 0x42, 0x62, 0x9a, 0x80,
}

// This is what should result from processing MessageBatchWithJunk and filtering out the junk.
var WantResultFromProcessingMessageBatchWithJunk = []byte{
	// type 1077 - GPS.
	0xd3, 0x00, 0xdc, 0x43, 0x50, 0x00, 0x67, 0x00, 0x97, 0x62, 0x00, 0x00, 0x08, 0x40, 0xa0, 0x65,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x80, 0x00, 0x6d, 0xff, 0xa8, 0xaa, 0x26, 0x23, 0xa6, 0xa2,
	0x23, 0x24, 0x00, 0x00, 0x00, 0x00, 0x36, 0x68, 0xcb, 0x83, 0x7a, 0x6f, 0x9d, 0x7c, 0x04, 0x92,
	0xfe, 0xf2, 0x05, 0xb0, 0x4a, 0xa0, 0xec, 0x7b, 0x0e, 0x09, 0x27, 0xd0, 0x3f, 0x23, 0x7c, 0xb9,
	0x6f, 0xbd, 0x73, 0xee, 0x1f, 0x01, 0x64, 0x96, 0xf5, 0x7b, 0x27, 0x46, 0xf1, 0xf2, 0x1a, 0xbf,
	0x19, 0xfa, 0x08, 0x41, 0x08, 0x7b, 0xb1, 0x1b, 0x67, 0xe1, 0xa6, 0x70, 0x71, 0xd9, 0xdf, 0x0c,
	0x61, 0x7f, 0x19, 0x9c, 0x7e, 0x66, 0x66, 0xfb, 0x86, 0xc0, 0x04, 0xe9, 0xc7, 0x7d, 0x85, 0x83,
	0x7d, 0xac, 0xad, 0xfc, 0xbe, 0x2b, 0xfc, 0x3c, 0x84, 0x02, 0x1d, 0xeb, 0x81, 0xa6, 0x9c, 0x87,
	0x17, 0x5d, 0x86, 0xf5, 0x60, 0xfb, 0x66, 0x72, 0x7b, 0xfa, 0x2f, 0x48, 0xd2, 0x29, 0x67, 0x08,
	0xc8, 0x72, 0x15, 0x0d, 0x37, 0xca, 0x92, 0xa4, 0xe9, 0x3a, 0x4e, 0x13, 0x80, 0x00, 0x14, 0x04,
	0xc0, 0xe8, 0x50, 0x16, 0x04, 0xc1, 0x40, 0x46, 0x17, 0x05, 0x41, 0x70, 0x52, 0x17, 0x05, 0x01,
	0xef, 0x4b, 0xde, 0x70, 0x4c, 0xb1, 0xaf, 0x84, 0x37, 0x08, 0x2a, 0x77, 0x95, 0xf1, 0x6e, 0x75,
	0xe8, 0xea, 0x36, 0x1b, 0xdc, 0x3d, 0x7a, 0xbc, 0x75, 0x42, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
	0x69, 0xe8,

	// Type 1087 - Glonass
	0xd3, 0x00, 0xc3, 0x43, 0xf0, 0x00, 0xa2, 0x93, 0x7c, 0x22, 0x00, 0x00, 0x04, 0x0e, 0x03, 0x80,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x7f, 0xfe, 0x9c, 0x8a, 0x80, 0x94, 0x86, 0x84,
	0x99, 0x0c, 0xa0, 0x95, 0x2a, 0x8b, 0xd8, 0x3a, 0x92, 0xf5, 0x74, 0x7d, 0x56, 0xfe, 0xb7, 0xec,
	0xe8, 0x0d, 0x41, 0x69, 0x7c, 0x00, 0x0e, 0xf0, 0x61, 0x42, 0x9c, 0xf0, 0x27, 0x38, 0x86, 0x2a,
	0xda, 0x62, 0x36, 0x3c, 0x8f, 0xeb, 0xc8, 0x27, 0x1b, 0x77, 0x6f, 0xb9, 0x4c, 0xbe, 0x36, 0x2b,
	0xe4, 0x26, 0x1d, 0xc1, 0x4f, 0xdc, 0xd9, 0x01, 0x16, 0x24, 0x11, 0x9a, 0xe0, 0x91, 0x02, 0x00,
	0x7a, 0xea, 0x61, 0x9d, 0xb4, 0xe1, 0x52, 0xf6, 0x1f, 0x22, 0xae, 0xdf, 0x26, 0x28, 0x3e, 0xe0,
	0xf6, 0xbe, 0xdf, 0x90, 0xdf, 0xb8, 0x01, 0x3f, 0x8e, 0x86, 0xbf, 0x7e, 0x67, 0x1f, 0x83, 0x8f,
	0x20, 0x51, 0x53, 0x60, 0x46, 0x60, 0x30, 0x43, 0xc3, 0x3d, 0xcf, 0x12, 0x84, 0xb7, 0x10, 0xc4,
	0x33, 0x53, 0x3d, 0x25, 0x48, 0xb0, 0x14, 0x00, 0x00, 0x04, 0x81, 0x28, 0x60, 0x13, 0x84, 0x81,
	0x08, 0x54, 0x13, 0x85, 0x40, 0xe8, 0x60, 0x12, 0x85, 0x01, 0x38, 0x5c, 0x67, 0xb7, 0x67, 0xa5,
	0xff, 0x4e, 0x71, 0xcd, 0xd3, 0x78, 0x27, 0x29, 0x0e, 0x5c, 0xed, 0xd9, 0xd7, 0xcc, 0x7e, 0x04,
	0xf8, 0x09, 0xc3, 0x73, 0xa0, 0x40, 0x70, 0xd9, 0x6d,

	//1097 - Galileo
	0xd3, 0x00, 0xc3, 0x44, 0x90, 0x00, 0x67, 0x00, 0x97, 0x62, 0x00, 0x00, 0x21, 0x18, 0x00, 0xc0,
	0x08, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x7f, 0xfe, 0xae, 0xbe, 0x90, 0x98, 0xa6, 0x9c,
	0xb4, 0x00, 0x00, 0x00, 0x08, 0xc1, 0x4b, 0xc1, 0x32, 0xf8, 0x0b, 0x08, 0xc5, 0x83, 0xc8, 0x01,
	0xe8, 0x25, 0x3f, 0x74, 0x7c, 0xc4, 0x02, 0xa0, 0x4b, 0xc1, 0x47, 0x90, 0x12, 0x86, 0x62, 0x72,
	0x92, 0x28, 0x53, 0x18, 0x9d, 0x8d, 0x85, 0x82, 0xc6, 0xe1, 0x8a, 0x6a, 0x2f, 0xdd, 0x5e, 0xcd,
	0xd3, 0xe1, 0x1a, 0x15, 0x01, 0xa1, 0x2b, 0xdc, 0x56, 0x3f, 0xc4, 0xea, 0xc0, 0x5e, 0xdc, 0x40,
	0x48, 0xd3, 0x80, 0xb2, 0x25, 0x60, 0x9c, 0x7b, 0x7e, 0x32, 0xdd, 0x3e, 0x22, 0xf7, 0x01, 0xb6,
	0xf3, 0x81, 0xaf, 0xb7, 0x1f, 0x78, 0xe0, 0x7f, 0x6c, 0xaa, 0xfe, 0x9a, 0x7e, 0x7e, 0x94, 0x9f,
	0xbf, 0x06, 0x72, 0x3f, 0x15, 0x8c, 0xb1, 0x44, 0x56, 0xe1, 0xb1, 0x92, 0xdc, 0xb5, 0x37, 0x4a,
	0xd4, 0x5d, 0x17, 0x38, 0x4e, 0x30, 0x24, 0x14, 0x00, 0x04, 0xc1, 0x50, 0x3e, 0x0f, 0x85, 0x41,
	0x40, 0x52, 0x13, 0x85, 0x61, 0x50, 0x5a, 0x16, 0x04, 0xa1, 0x38, 0x12, 0x5b, 0x24, 0x7e, 0x03,
	0x6c, 0x07, 0x89, 0xdb, 0x93, 0xbd, 0xba, 0x0d, 0x34, 0x27, 0x68, 0x75, 0xd0, 0xa6, 0x72, 0x24,
	0xe4, 0x88, 0xdc, 0x61, 0xa9, 0x40, 0xb1, 0x9d, 0x0d,

	// Type 1127 - Beidou
	0xd3, 0x00, 0xaa, 0x46, 0x70, 0x00, 0x66, 0xff, 0xbc, 0xa0, 0x00, 0x00, 0x00, 0x04, 0x00, 0x26,
	0x18, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x75, 0x53, 0xfa, 0x82, 0x42, 0x62, 0x9a, 0x80,
	0x00, 0x00, 0x06, 0x95, 0x4e, 0xa7, 0xa0, 0xbf, 0x1e, 0x78, 0x7f, 0x0a, 0x10, 0x08, 0x18, 0x7f,
	0x35, 0x04, 0xab, 0xee, 0x50, 0x77, 0x8a, 0x86, 0xf0, 0x51, 0xf1, 0x4d, 0x82, 0x46, 0x38, 0x29,
	0x0a, 0x8c, 0x35, 0x57, 0x23, 0x87, 0x82, 0x24, 0x2a, 0x01, 0xb5, 0x40, 0x07, 0xeb, 0xc5, 0x01,
	0x37, 0xa8, 0x80, 0xb3, 0x88, 0x03, 0x23, 0xc4, 0xfc, 0x61, 0xe0, 0x4f, 0x33, 0xc4, 0x73, 0x31,
	0xcd, 0x90, 0x54, 0xb2, 0x02, 0x70, 0x90, 0x26, 0x0b, 0x42, 0xd0, 0x9c, 0x2b, 0x0c, 0x02, 0x97,
	0xf4, 0x08, 0x3d, 0x9e, 0xc7, 0xb2, 0x6e, 0x44, 0x0f, 0x19, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0x1e, 0xd8,
}
